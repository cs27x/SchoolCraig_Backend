{
    "swagger": "2.0",
    "info": {
        "title": "SchoolCraig API",
        "description": "RESTful API for SchoolCraig Project",
        "version": "1.0.0"
    },
    "host": "school-craig.herokuapp.com",
    "schemes": [
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/user/id/{userid}": {
            "get": {
                "summary": "Retrieves user by ID",
                "description": "Lists user with specified ID",
                "parameters": [
                    {
                        "name": "userid",
                        "in": "path",
                        "description": "id for user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Object",
                        "schema": {
                            "type": "object",
                            "$ref": "UserNoPassword"
                        }
                    },
                    "404": {
                        "description": "ERROR User not found"
                    }
                }
            },
            "put": {
                "summary": "Modifies user by ID",
                "description": "Modifies a user specified by ID",
                "parameters": [
                    {
                        "name": "userid",
                        "in": "path",
                        "description": "id for user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "user",
                        "in": "body",
                        "description": "User object",
                        "schema": {
                            "type": "object",
                            "$ref": "PutUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful modification"
                    },
                    "401": {
                        "description": "ERROR parameter not a uuid"
                    },
                    "403": {
                        "description": "ERROR user issuing request is not user to be modified"
                    }
                }
            },
            "delete": {
                "summary": "Deletes user by ID",
                "description": "Deletes a user specified by ID, and all of their posts",
                "parameters": [
                    {
                        "name": "userid",
                        "in": "path",
                        "description": "id for user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful deletion"
                    },
                    "401": {
                        "description": "ERROR parameter not a uuid or deletion unsuccessful"
                    },
                    "403": {
                        "description": "ERROR user issuing request is not user to be deleted"
                    }
                }
            }
        },
        "/user/all": {
            "get": {
                "summary": "All Users",
                "description": "Lists all users in the Database",
                "responses": {
                    "200": {
                        "description": "An array of User Objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "UserNoPassword"
                            }
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "summary": "Creates new User",
                "description": "Takes a user in JSON format and writes to the database. id is a V4 UUID and can be passed optionally. A uuid will be generated by the server if ommited. Also sends an email with activation link to the provided email address.",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "$ref": "User"
                        },
                        "description": "User object",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful creation of new user"
                    },
                    "401": {
                        "description": "ERROR missing required fields or id is not uuid"
                    }
                }
            }
        },
        "/post/id/{postid}": {
            "get": {
                "summary": "Retrieves post by ID",
                "description": "Lists post with specified id",
                "parameters": [
                    {
                        "name": "postid",
                        "in": "path",
                        "description": "id for user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Specified Post Object",
                        "schema": {
                            "type": "object",
                            "$ref": "Post"
                        }
                    },
                    "401": {
                        "description": "ERROR id is not a uuid"
                    },
                    "404": {
                        "description": "ERROR User not found"
                    }
                }
            },
            "put": {
                "summary": "Modifies post by ID",
                "description": "Modifies a post specified by ID",
                "parameters": [
                    {
                        "name": "postid",
                        "in": "path",
                        "description": "id for post",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "post",
                        "in": "body",
                        "description": "Post object with desired changes",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "PutPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful modification"
                    },
                    "401": {
                        "description": "ERROR id is not a uuid, post does not exist, or missing required fields"
                    },
                    "403": {
                        "description": "ERROR user issuing request does not own post"
                    }
                }
            },
            "delete": {
                "summary": "Deletes Post",
                "description": "Deletes a given post by id",
                "responses": {
                    "200": {
                        "description": "successful deletion"
                    },
                    "401": {
                        "description": "ERROR id is not uuid or unsuccessful deletion"
                    }
                }
            }
        },
        "/post/all": {
            "get": {
                "summary": "All Posts",
                "description": "Lists all posts in the Database",
                "responses": {
                    "200": {
                        "description": "An array of Post Objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "Post"
                            }
                        }
                    },
                    "403": {
                        "description": "ERROR user not authorized"
                    }
                }
            }
        },
        "/post": {
            "post": {
                "summary": "Creates new Post",
                "description": "Takes a Post in JSON form and writes to the database.  id is a V4 UUID and can be passed optionally. A uuid will be generated by the server if ommited.",
                "parameters": [
                    {
                        "name": "post",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "$ref": "Post"
                        },
                        "description": "Post object",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succesful write to database"
                    },
                    "401": {
                        "description": "ERROR id, user_id, or category_id is not a uuid, or missing description or title"
                    }
                }
            }
        },
        "/user/auth": {
            "post": {
                "summary": "Authenticates user",
                "description": "Authenticates a given user by passed in credentials. Establishes a session if credentials are valid.",
                "parameters": [
                    {
                        "name": "auth",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "$ref": "Auth"
                        },
                        "description": "Auth object",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful authentication",
                        "schema": {
                            "type": "object",
                            "$ref": "User",
                            "description": "User object"
                        }
                    },
                    "401": {
                        "description": "Failed authentication"
                    }
                }
            }
        },
        "/user/deauth": {
            "post": {
                "summary": "Deauthenticates user",
                "description": "Ends current session",
                "responses": {
                    "200": {
                        "description": "successful logout"
                    }
                }
            }
        },
        "/category": {
            "post": {
                "summary": "Creates new category",
                "description": "Creates a new category",
                "parameters": [
                    {
                        "name": "category",
                        "description": "category to be created",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "$ref": "Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful creation"
                    }
                }
            }
        },
        "/category/all": {
            "get": {
                "summary": "Retrieves all Categories",
                "description": "Lists all Categoies",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/category/id/{category_id}": {
            "get": {
                "summary": "Retrieves all Categories",
                "description": "Displays a Category by id",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "path",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "$ref": "Category"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "User": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique id for user"
                },
                "fname": {
                    "type": "string",
                    "description": "First name of user"
                },
                "lname": {
                    "type": "string",
                    "description": "Last name of user"
                },
                "email": {
                    "type": "string",
                    "description": "Email of user"
                },
                "password": {
                    "type": "string",
                    "description": "hashed password for user"
                }
            }
        },
        "UserNoPassword": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique id for user"
                },
                "fname": {
                    "type": "string",
                    "description": "First name of user"
                },
                "lname": {
                    "type": "string",
                    "description": "Last name of user"
                },
                "email": {
                    "type": "string",
                    "description": "Email of user"
                }
            }
        },
        "PutUser": {
            "properties": {
                "fname": {
                    "type": "string",
                    "description": "First name of user"
                },
                "lname": {
                    "type": "string",
                    "description": "Last name of user"
                }
            }
        },
        "Post": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique id for post"
                },
                "cost": {
                    "type": "number",
                    "description": "cost of item"
                },
                "user_id": {
                    "type": "string",
                    "description": "unique id for associated user"
                },
                "title": {
                    "type": "string",
                    "description": "title of the post"
                },
                "description": {
                    "type": "string",
                    "description": "description of posting"
                },
                "category_id": {
                    "type": "string",
                    "description": "id for a given category"
                },
                "date": {
                    "type": "string",
                    "description": "timestamp of when the post was create"
                }
            }
        },
        "PutPost": {
            "properties": {
                "cost": {
                    "type": "number",
                    "description": "cost of item"
                },
                "title": {
                    "type": "string",
                    "description": "title of the post"
                },
                "description": {
                    "type": "string",
                    "description": "description of posting"
                }
            }
        },
        "Category": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "category id"
                },
                "name": {
                    "type": "string",
                    "description": "name of category"
                }
            }
        },
        "Auth": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "email of user"
                },
                "password": {
                    "type": "string",
                    "description": "hash password of user"
                }
            }
        }
    }
}